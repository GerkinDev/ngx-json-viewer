{"version":3,"file":"ngx-json-viewer.js","sources":["ng://ngx-json-viewer/src/ngx-json-viewer/ngx-json-viewer.component.ts","ng://ngx-json-viewer/src/ngx-json-viewer.module.ts","ng://ngx-json-viewer/ngx-json-viewer.ts"],"sourcesContent":["import { Component, OnChanges, Input, SimpleChanges } from '@angular/core';\nimport isEqual from 'deep-equal';\n\nexport interface Segment {\n\tkey: string;\n\tvalue: any;\n\ttype: undefined | string;\n\tdescription: string;\n\texpanded: boolean;\n}\n\n@Component({\n\tselector: 'ngx-json-viewer',\n\ttemplateUrl: './ngx-json-viewer.component.html',\n\tstyleUrls: ['./ngx-json-viewer.component.scss']\n})\nexport class NgxJsonViewerComponent implements OnChanges {\n\n\t@Input() path: string[] = [];\n\t@Input() json: any;\n\t@Input() expanded = true;\n\n\tsegments: Segment[] = [];\n\tprivate readonly expandedChildren = new Set<string>();\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\t// Re-parse only if JSON changed & values are not similar (use deep object/array comparison)\n\t\tif (!changes.json || isEqual(changes.json.previousValue, changes.json.currentValue)) {\n\t\t\treturn;\n\t\t}\n\t\tconst newJson = changes.json.currentValue;\n\n\t\tif (typeof newJson === 'object') {\n\t\t\tthis.segments = Object.keys(newJson).map(key => this.parseKeyValue(key, newJson[key]));\n\t\t} else {\n\t\t\tthis.segments = [this.parseKeyValue(`(${typeof newJson})`, newJson)];\n\t\t}\n\n\t\tif(!changes.expanded){\n\t\t\t// Clean up expanded children keys that no longer exist.\n\t\t\tfor(const oldChildSegmentdKey in this.expandedChildren.values()){\n\t\t\t\tif(!this.segments.some(s => s.key === oldChildSegmentdKey)){\n\t\t\t\t\tthis.expandedChildren.delete(oldChildSegmentdKey);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\t// Clear the state of individual elements.\n\t\t\tthis.expandedChildren.clear();\n\t\t}\n\t}\n\n\tisExpandable(segment: Segment) {\n\t\treturn segment.type === 'object' || segment.type === 'array';\n\t}\n\n\tisChildExpanded(segment: Segment | string) {\n\t\treturn this.expandedChildren.has(typeof segment === 'string' ? segment : segment.key);\n\t}\n\n\ttoggle(segment: Segment) {\n\t\t// Check if the given segment is expandable.\n\t\t// This check is required to avoid storing useless keys in the expanded children set.\n\t\tif (this.isExpandable(segment)) {\n\t\t\t// Add or remove the segment key to the set of opened segments\n\t\t\tif (this.isChildExpanded(segment)) {\n\t\t\t\tthis.expandedChildren.delete(segment.key);\n\t\t\t} else {\n\t\t\t\tthis.expandedChildren.add(segment.key);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate parseKeyValue(key: any, value: any): Segment {\n\t\tconst segment: Segment = {\n\t\t\tkey,\n\t\t\tvalue,\n\t\t\ttype: undefined,\n\t\t\tdescription: '' + value,\n\t\t\t// Retrieve the current expand state.\n\t\t\texpanded: this.expanded || this.isChildExpanded(key),\n\t\t};\n\n\t\tswitch (typeof segment.value) {\n\t\t\tcase 'number': {\n\t\t\t\tsegment.type = 'number';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'boolean': {\n\t\t\t\tsegment.type = 'boolean';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'function': {\n\t\t\t\tsegment.type = 'function';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'string': {\n\t\t\t\tsegment.type = 'string';\n\t\t\t\tsegment.description = '\"' + segment.value + '\"';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'undefined': {\n\t\t\t\tsegment.type = 'undefined';\n\t\t\t\tsegment.description = 'undefined';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'object': {\n\t\t\t\t// yea, null is object\n\t\t\t\tif (segment.value === null) {\n\t\t\t\t\tsegment.type = 'null';\n\t\t\t\t\tsegment.description = 'null';\n\t\t\t\t} else if (Array.isArray(segment.value)) {\n\t\t\t\t\tsegment.type = 'array';\n\t\t\t\t\tsegment.description = 'Array[' + segment.value.length + '] ' + JSON.stringify(segment.value);\n\t\t\t\t} else if (segment.value instanceof Date) {\n\t\t\t\t\tsegment.type = 'date';\n\t\t\t\t} else {\n\t\t\t\t\tsegment.type = 'object';\n\t\t\t\t\tsegment.description = 'Object ' + JSON.stringify(segment.value);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn segment;\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxJsonViewerComponent } from './ngx-json-viewer/ngx-json-viewer.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxJsonViewerComponent\n  ],\n  exports: [\n    NgxJsonViewerComponent\n  ]\n})\nexport class NgxJsonViewerModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["tslib_1.__decorate"],"mappings":";;;;;;IAWA;QAOU,SAAI,GAAa,EAAE,CAAC;QAEpB,aAAQ,GAAG,IAAI,CAAC;QAEzB,aAAQ,GAAc,EAAE,CAAC;QACR,qBAAgB,GAAG,IAAI,GAAG,EAAU,CAAC;KAuGtD;IArGA,4CAAW,GAAX,UAAY,OAAsB;QAAlC,iBAyBC;;QAvBA,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;YACpF,OAAO;SACP;QACD,IAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC;QAE1C,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAChC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,GAAA,CAAC,CAAC;SACvF;aAAM;YACN,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,MAAI,OAAO,OAAO,MAAG,EAAE,OAAO,CAAC,CAAC,CAAC;SACrE;QAED,IAAG,CAAC,OAAO,CAAC,QAAQ,EAAC;oCAEV,mBAAmB;gBAC5B,IAAG,CAAC,OAAK,QAAQ,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,KAAK,mBAAmB,GAAA,CAAC,EAAC;oBAC1D,OAAK,gBAAgB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;iBAClD;;;;YAHF,KAAI,IAAM,mBAAmB,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE;wBAArD,mBAAmB;aAI5B;SAED;aAAM;;YAEN,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;SAC9B;KACD;IAED,6CAAY,GAAZ,UAAa,OAAgB;QAC5B,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ,IAAI,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC;KAC7D;IAED,gDAAe,GAAf,UAAgB,OAAyB;QACxC,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,OAAO,KAAK,QAAQ,GAAG,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;KACtF;IAED,uCAAM,GAAN,UAAO,OAAgB;;;QAGtB,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE;;YAE/B,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;gBAClC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;aAC1C;iBAAM;gBACN,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;aACvC;SACD;KACD;IAEO,8CAAa,GAArB,UAAsB,GAAQ,EAAE,KAAU;QACzC,IAAM,OAAO,GAAY;YACxB,GAAG,KAAA;YACH,KAAK,OAAA;YACL,IAAI,EAAE,SAAS;YACf,WAAW,EAAE,EAAE,GAAG,KAAK;;YAEvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC;SACpD,CAAC;QAEF,QAAQ,OAAO,OAAO,CAAC,KAAK;YAC3B,KAAK,QAAQ,EAAE;gBACd,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC;gBACxB,MAAM;aACN;YACD,KAAK,SAAS,EAAE;gBACf,OAAO,CAAC,IAAI,GAAG,SAAS,CAAC;gBACzB,MAAM;aACN;YACD,KAAK,UAAU,EAAE;gBAChB,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC;gBAC1B,MAAM;aACN;YACD,KAAK,QAAQ,EAAE;gBACd,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC;gBACxB,OAAO,CAAC,WAAW,GAAG,GAAG,GAAG,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC;gBAChD,MAAM;aACN;YACD,KAAK,WAAW,EAAE;gBACjB,OAAO,CAAC,IAAI,GAAG,WAAW,CAAC;gBAC3B,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC;gBAClC,MAAM;aACN;YACD,KAAK,QAAQ,EAAE;;gBAEd,IAAI,OAAO,CAAC,KAAK,KAAK,IAAI,EAAE;oBAC3B,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC;oBACtB,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC;iBAC7B;qBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBACxC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC;oBACvB,OAAO,CAAC,WAAW,GAAG,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBAC7F;qBAAM,IAAI,OAAO,CAAC,KAAK,YAAY,IAAI,EAAE;oBACzC,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC;iBACtB;qBAAM;oBACN,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC;oBACxB,OAAO,CAAC,WAAW,GAAG,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBAChE;gBACD,MAAM;aACN;SACD;QAED,OAAO,OAAO,CAAC;KACf;IA3GQA;QAAR,KAAK,EAAE;wDAAqB;IACpBA;QAAR,KAAK,EAAE;wDAAW;IACVA;QAAR,KAAK,EAAE;4DAAiB;IAJb,sBAAsB;QALlC,SAAS,CAAC;YACV,QAAQ,EAAE,iBAAiB;YAC3B,47BAA+C;;SAE/C,CAAC;OACW,sBAAsB,CA8GlC;IAAD,6BAAC;CA9GD;;;ICAA;KAAoC;IAAvB,mBAAmB;QAX/B,QAAQ,CAAC;YACR,OAAO,EAAE;gBACP,YAAY;aACb;YACD,YAAY,EAAE;gBACZ,sBAAsB;aACvB;YACD,OAAO,EAAE;gBACP,sBAAsB;aACvB;SACF,CAAC;OACW,mBAAmB,CAAI;IAAD,0BAAC;CAApC;;AChBA;;GAEG;;;;"}